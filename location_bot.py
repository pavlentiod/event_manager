import json
import logging
from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.dispatcher import Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, \
    InlineKeyboardButton
import time

bot = Bot(token='TOKEN')
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())
mrk = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton(text='–ù—É –∏ –≥–¥–µ —Å–Ω–æ–≤–∞ —ç—Ç–æ—Ç –≥–æ–º–æ—Å–µ–∫—Å—É–∞–ª?', callback_data='where'))
p = {365441836: 'tema', 232706431: 'pasha'}
comm = {'last_loc_tema': {"latitude": 10.750442, "longitude": 106.662022},
        'last_loc_pasha': {"latitude": 10.750442, "longitude": 106.662022}}


async def start(m: types.Message):
    await bot.send_message(m.from_user.id,
                           '–ó–¥–∞—Ä–æ–≤–∞! –ù—É –Ω–∞–¥–µ—é—Å—å –ø–∞—à–æ–∫ —Ç–µ–±–µ –≤—Å—ë  –æ–±—ä—è—Å–Ω–∏–ª, –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Å—Ç—ã–µ:\n\n1. –¢—Ä—É—Å–µ–ª—è —Å–≤–æ–∏ –≥—Ä—è–∑–Ω—ã–µ –Ω–µ —Ä–∞–∑–±—Ä–∞—Å—ã–≤–∞—Ç—å\n2. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–Ω–æ–≤–ª—è—Ç—å –Ω–µ —Ä–∞–∑, —Å—É–∫–∞, –≤ –º–µ—Å—è—Ü',
                           reply_markup=mrk)


async def remind(m: types.Message):
    await bot.send_message(chat_id=365441836,
                           text='–ú—É—Å—è! –Ø —É–∂–µ –≤—Å–µ –º–æ—Ä–≥–∏ –æ–±–∑–≤–æ–Ω–∏–ª, —Ç–µ–±—è –Ω–∏–≥–¥–µ –Ω–µ—Ç, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é :( \n\n–ì–µ–æ–º–µ—Ç–æ—á–∫–æ–π –ø–æ–¥–µ–ª–∏—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞...')
    await bot.send_message(chat_id=232706431,
                           text='–ú—É—Å—è! –Ø —É–∂–µ –≤—Å–µ –º–æ—Ä–≥–∏ –æ–±–∑–≤–æ–Ω–∏–ª, —Ç–µ–±—è –Ω–∏–≥–¥–µ –Ω–µ—Ç, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é :( \n\n–ì–µ–æ–º–µ—Ç–æ—á–∫–æ–π –ø–æ–¥–µ–ª–∏—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞...')


async def start_ps(m: types.Message):
    await bot.delete_my_commands()
    await bot.set_my_commands([types.BotCommand('whe_a_u_broo', '–±—Ä–æ–æ–æ, —Ç—ã –≥–¥–µ?? :)')])
    await bot.set_my_commands([types.BotCommand('last_loc_pasha', '{"latitude": 60.000633, "longitude": 30.355768}'),
                               types.BotCommand('last_loc_tema', '{"latitude": 60.000633, "longitude": 30.355768}')],
                              language_code='czn')


async def search_gomo(cb: types.CallbackQuery):
    await bot.send_message(cb.from_user.id, '–í–∫–ª—é—á–∞—é —Å–∫–∞–Ω–µ—Ä –±–∂–∂–∂–∂–∂–∂–∂–∂–∂–∂–∂.....')
    time.sleep(4)
    await bot.send_message(cb.from_user.id, '–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ —è —ç—Ç—É —Å—É–∫—É –≤–∏–¥–µ–ª –≥–¥–µ-—Ç–æ —Ç—É—Ç:')
    # comm =  {i.command: json.loads(str(i.description).replace("'", '"')) for i in
    #          await bot.get_my_commands(language_code='xy')}
    comm.update({i.command: json.loads(str(i.description).replace("'", '"')) for i in
                 await bot.get_my_commands(language_code='czn')})
    # await bot.send_message(cb.from_user.id, comm)
    loc = comm[f'last_loc_{p[cb.from_user.id]}']
    await bot.send_location(chat_id=cb.from_user.id, latitude=loc['latitude'], longitude=loc['longitude'])
    # await bot.send_location(chat_id=cb.from_user.id, latitude=59.939098, longitude=30.315868)
    mrk = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(
        KeyboardButton(text='–°–µ–≥–æ–¥–Ω—è —è —Ç—É—Ç', request_location=True))
    await bot.send_message(cb.from_user.id, '–Ø —Å–≤–æ—ë –¥–µ–ª–æ —Å–¥–µ–ª–∞–ª, –ø–æ–≤–µ–¥—É–π —Ç–µ–ø–µ—Ä—å –∫—É–¥–∞ –ø–∏–∑–¥—ã –ø—Ä–∏–µ—Ö–∞—Ç—å –≤—Ä—É—á–∏—Ç—å',
                           reply_markup=mrk)


async def loc_save(m: types.Message):
    await bot.send_message(chat_id=m.from_user.id, text='–ê—Ö–∞—Ö–∞—Ö–∞—Ö, –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞–º —è —É–∂–µ —Å–∫–∏–Ω—É–ª, —Å–ø—Å',
                           reply_markup=types.ReplyKeyboardRemove())
    if m.from_user.id == 365441836:
        await bot.set_my_commands(commands=[types.BotCommand('last_loc_pasha', str(m.location))], language_code='czn')
    elif m.from_user.id == 232706431:
        await bot.set_my_commands(commands=[types.BotCommand('last_loc_tema', str(m.location))], language_code='czn')

async def send_loco(m: types.Message):
    mrk = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–æüìç', request_location=True))
    await bot.send_message(m.from_user.id, '–û—Ç–ø—Ä–∞–≤—å –ª–æ–∫–∞—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É!', reply_markup=mrk)

dp.register_message_handler(start, commands=['start', 'whe_a_u_broo'])
dp.register_message_handler(send_loco, commands=['send_location'])
dp.register_message_handler(remind, commands=['rem'])
dp.register_message_handler(start_ps, commands=['start_ps'])
dp.register_callback_query_handler(search_gomo, lambda x: x.data == 'where')
dp.register_message_handler(loc_save, content_types=['location'])


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
    logging.warning('Bye!')


